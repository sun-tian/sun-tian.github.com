I"t <h1 id="javascript-prototype原型对象"><a href="https://tech.meituan.com/2018/09/27/fe-security.html">JavaScript prototype（原型对象）</a></h1>

<p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法。</p>

<p>在前面的章节中我们学会了如何使用对象的构造器（constructor）：</p>

<h2 id="实例">实例</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">last</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">eyecolor</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">first</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">last</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">eyeColor</span> <span class="o">=</span> <span class="nx">eyecolor</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="kd">var</span> <span class="nx">myFather</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">John</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Doe</span><span class="dl">"</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">myMother</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Sally</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Rally</span><span class="dl">"</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">);</span>

</code></pre></div></div>

<p>我们也知道在一个已存在的对象构造器中是不能添加新的属性的：</p>

<h2 id="实例-1">实例</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Person</span><span class="p">.</span><span class="nx">nationality</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">English</span><span class="dl">"</span><span class="p">;</span>
<span class="p">[</span><span class="err">尝试一下</span> <span class="err">»</span><span class="p">](</span><span class="nx">https</span><span class="p">:</span><span class="c1">//www.runoob.com/try/try.php?filename=tryjs_object_prototype3)</span>
</code></pre></div></div>

<p>要添加一个新的属性需要在在构造器函数中添加：</p>

<h2 id="实例-2">实例</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">last</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">eyecolor</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">first</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">last</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">eyeColor</span> <span class="o">=</span> <span class="nx">eyecolor</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">nationality</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">English</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://www.runoob.com/try/try.php?filename=tryjs_object_prototype4">尝试一下 »</a></p>

<hr />

<h2 id="prototype-继承">prototype 继承</h2>

<p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Date</code> 对象从 <code class="language-plaintext highlighter-rouge">Date.prototype</code> 继承。</li>
  <li><code class="language-plaintext highlighter-rouge">Array</code> 对象从 <code class="language-plaintext highlighter-rouge">Array.prototype</code> 继承。</li>
  <li><code class="language-plaintext highlighter-rouge">Person</code> 对象从 <code class="language-plaintext highlighter-rouge">Person.prototype</code> 继承。</li>
</ul>

<p>所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例。</p>

<p>JavaScript 对象有一个指向一个原型对象的链。当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及该对象的原型的原型，依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾。</p>

<p><code class="language-plaintext highlighter-rouge">Date</code> 对象, <code class="language-plaintext highlighter-rouge">Array</code> 对象, 以及 <code class="language-plaintext highlighter-rouge">Person</code> 对象从 <code class="language-plaintext highlighter-rouge">Object.prototype</code> 继承。</p>

<h3 id="添加属性和方法">添加属性和方法</h3>

<p>有的时候我们想要在所有已经存在的对象添加新的属性或方法。</p>

<p>另外，有时候我们想要在对象的构造函数中添加属性或方法。</p>

<p>使用 prototype 属性就可以给对象的构造函数添加新的属性：</p>

<h2 id="实例-3">实例</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Person</span><span class="p">(</span><span class="nx">first</span><span class="p">,</span> <span class="nx">last</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">eyecolor</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="nx">first</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="nx">last</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">eyeColor</span> <span class="o">=</span> <span class="nx">eyecolor</span><span class="p">;</span>
<span class="p">}</span>
 
<span class="nx">Person</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">nationality</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">English</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p><a href="https://www.runoob.com/try/try.php?filename=tryjs_object_prototype5">尝试一下 »</a></p>

<p>当然我们也可以使用 prototype 属性就可以给对象的构造函数添加新的方法：</p>

<h2 id="实例-4">实例</h2>
:ET