I"vl<h1 id="视频版youtube-github-issues理解git-and-github-tutorials-5---understanding-github-issues"><a href="https://www.youtube.com/watch?v=TKJ4RdhyB5Y">视频版YouTube GitHub issues理解：Git and GitHub Tutorials #5 - Understanding GitHub Issues</a></h1>

<h1 id="如何使用-issue-管理软件项目"><a href="http://www.ruanyifeng.com/blog/2017/08/issue.html">如何使用 Issue 管理软件项目？</a></h1>

<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p>

<p>日期： <a href="http://www.ruanyifeng.com/blog/2017/08/">2017年8月29日</a></p>

<p>软件开发（尤其是商业软件）离不开项目管理，Issue 是最通用的管理工具之一。</p>

<p>本文介绍 Issue 的基本用法。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720213651.jpg" alt="img" /></p>

<h2 id="一issue-是什么">一、Issue 是什么？</h2>

<p>Issue 指的是一项待完成的工作，通常与系统的改进相关，中文可以译为”问题”或”事务”。下面这些都是 Issue 的例子。</p>

<blockquote>
  <ul>
    <li>一个软件的 bug</li>
    <li>一项功能建议</li>
    <li>一项待完成的任务</li>
    <li>文档缺失的报告</li>
  </ul>
</blockquote>

<p>每个 Issue 应该包含该问题的所有信息和历史，使得后来的人只看这个 Issue，就能了解问题的所有方面和过程。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720213653.jpg" alt="img" /></p>

<p>历史上，Issue 起源于客服部门。用户打电话反映问题，客服就创建一个工单（ticket），后续的每一个处理步骤、每一次与用户的交流，都要更新工单，记录全部信息。这就是 Issue 的前身。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082418.jpg" alt="img" /></p>

<p>因此，Issue 的原始功能是问题追踪和工单管理，后来不断扩展，逐渐演变成全功能的项目管理工具，还可以用于制定和实施软件的开发计划。</p>

<p>除了软件，其他项目也可以使用 Issue，比如有人把自己住宅的<a href="https://github.com/frabcus/house/issues?q=is%3Aissue+is%3Aclosed">改善计划</a>都做成了 Issue。</p>

<h2 id="二issue-跟踪管理系统">二、Issue 跟踪管理系统</h2>

<p>专门管理 Issue 的软件，叫做 <a href="https://en.wikipedia.org/wiki/Issue_tracking_system">Issue 跟踪管理系统</a>（Issue tracking system）。它面向所有人，普通用户也可以使用。</p>

<p>还有一种 <a href="https://en.wikipedia.org/wiki/Bug_tracking_system">Bug 跟踪管理系统</a>，通常只面向开发者，比如下图的 Bugzilla。它和 Issue 系统可以同时使用，但是也可以被 Issue 系统取代。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082425.jpg" alt="img" /></p>

<p>一般来说，Issue 跟踪管理系统应该具有以下功能。</p>

<blockquote>
  <ul>
    <li>项目管理
　　- 指定 Issue 的优先级
　　- 指定 Issue 所在的阶段
　　- 分配负责 Issue 的处理人员
　　- 制定日程
　　- 监控进度，提供统计</li>
    <li>团队合作
　　- 讨论
　　- 邮件通知</li>
    <li>代码管理
　　- 将 Issue 关联源码
　　- 将 Issue 关联代码提交与合并</li>
  </ul>
</blockquote>

<h2 id="三github-issues">三、Github Issues</h2>

<p>目前，最出名的 Issue 跟踪管理系统是 <a href="https://www.atlassian.com/software/jira">JIRA</a>。它是一个收费软件，这里就不介绍了。下面通过免费的 <a href="https://guides.github.com/features/issues/">Github Issues</a>，来介绍如何使用 Issue。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720213859.png" alt="img" /></p>

<h3 id="31-基本用法">3.1 基本用法</h3>

<p>每个 Github 代码仓库都有一个 Issues 面板。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082405.png" alt="img" /></p>

<p>进入该面板，点击”New Issue”按钮，就可以新建 Issue。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082427.jpg" alt="img" /></p>

<p>上图是新建 Issue 的界面，左侧填入 Issue 的标题和内容，右侧是四个配置项（只有项目管理者才能看到）。</p>

<blockquote>
  <ul>
    <li>Assignees：人员</li>
    <li>Labels：标签</li>
    <li>Projects：项目</li>
    <li>Milestone：里程碑</li>
  </ul>
</blockquote>

<p>下面，一个个介绍这些配置项。</p>

<h3 id="32-assignee">3.2 Assignee</h3>

<p>Assignee 选择框用于从当前仓库的所有成员之中，指派某个 Issue 的处理人员。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082406.png" alt="img" /></p>

<p>下拉框里面单击人名即可。</p>

<h3 id="33-labels">3.3 Labels</h3>

<p>Issue 可以贴上标签，这样有利于分类管理和过滤查看。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082402.jpg" alt="img" /></p>

<p>新建标签，要在 Issues 面板的首页，点击 Labels 按钮。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082407.png" alt="img" /></p>

<p>这时，会显示六个默认的标签。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082408.png" alt="img" /></p>

<p>如果想新建更多的标签，可以点击 New label 按钮。然后，填写标签名，选择标签颜色。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082409.png" alt="img" /></p>

<h3 id="34-常用-label">3.4 常用 Label</h3>

<p>对于大型项目， 每个 Issue 至少应该有两个 Label ，一个表示性质，另一个表示优先级。</p>

<p>表示性质的 Label，可以参考<a href="https://robinpowered.com/blog/best-practice-system-for-organizing-and-tagging-github-issues/">这篇文章</a>的范例。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082428.png" alt="img" /></p>

<p>表示优先级的 Label，可以采用下面的级别。</p>

<blockquote>
  <ul>
    <li><strong>高优先级</strong>（High）：对系统有重大影响，只有解决它之后，才能去完成其他任务。</li>
    <li><strong>普通优先级</strong>（Medium）：对系统的某个部分有影响，用户的一部分操作会达不到预期效果。</li>
    <li><strong>低优先级</strong>（Low）：对系统的某个部分有影响，用户几乎感知不到。</li>
    <li><strong>微不足道</strong>（Trivial）：对系统的功能没有影响，通常是视觉效果不理想，比如字体和颜色不满意。</li>
  </ul>
</blockquote>

<h3 id="35-milestone">3.5 Milestone</h3>

<p>Milestone 叫做”里程碑”，用作 Issue 的容器，相关 Issue 可以放在一个 Milestone 里面。常见的例子是不同的版本（version）和迭代（sprint），都可以做成 Milestone。</p>

<p>新建 Milestone，要在 Issues 面板的首页，点击 Milestones 按钮。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082410.png" alt="img" /></p>

<p>这时，再接着点击 New milestone 按钮，然后填写 Milestone 的名称和内容，还可以指定到期时间。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082429.png" alt="img" /></p>

<h3 id="36-全局视图">3.6 全局视图</h3>

<p>Issues 面板只能查看和操作当前仓库，Github 还提供全局视图，让用户查看和操作所有与自己相关的 Issue。</p>

<p>访问 <a href="https://github.com/issues">github.com/issues</a> 这个网址，就可以打开全局视图。里面的 Issue 分成三类。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082430.png" alt="img" /></p>

<blockquote>
  <ul>
    <li>Created：你创建的 Issue</li>
    <li>Assigned：分配给你的 Issue</li>
    <li>Mentioned：提及你的 Issue</li>
  </ul>
</blockquote>

<p>Created 和 Assigned 的含义显而易见，Mentioned 是指他人在 Issue 里面 @ 了你。下面是一个例子。</p>

<blockquote>
  <p>It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?</p>

  <p>/cc @kneath @jresig</p>
</blockquote>

<p>全局视图还提供了搜索、过滤和排序功能。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082431.png" alt="img" /></p>

<h2 id="四看板功能">四、看板功能</h2>

<h3 id="41-看板是什么">4.1 看板是什么？</h3>

<p><a href="https://en.wikipedia.org/wiki/Kanban_(development)">看板</a>（kanban）是敏捷开发的重要手段，主要用于项目的进度管理。所有需要完成的任务，都做成卡片，贴在一块白板上面，这就是看板。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082411.jpg" alt="img" /></p>

<p>按照不同的阶段，看板分成若干列。上图是一种常见的分法，将项目周期分成三列。</p>

<blockquote>
  <ul>
    <li>Todo （待开发）</li>
    <li>Doing （开发中）</li>
    <li>Done （已完成）</li>
  </ul>
</blockquote>

<p>你可以根据实际情况，分出更多的列。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082412.jpg" alt="img" /></p>

<blockquote>
  <ul>
    <li>Todo （待安排）</li>
    <li>Plan （计划）</li>
    <li>Develop （开发）</li>
    <li>Test （测试）</li>
    <li>Deploy （部署）</li>
    <li>Done （已完成）</li>
  </ul>
</blockquote>

<h3 id="42-github-的看板功能">4.2 Github 的看板功能</h3>

<p>Github 提供 Issue 看板。首先，在仓库首页进入 Projects 面板。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082414.png" alt="img" /></p>

<p>然后，点击 New Project 按钮，新建一个 Project，比如”2.0 版”。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082415.png" alt="img" /></p>

<p>接着，点击 Add column 按钮，为该项目新建若干列。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082416.png" alt="img" /></p>

<p>最后，将 Issue 分配到对应的列，就新建成功了一个看板视图。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082432.jpg" alt="img" /></p>

<p>Issue 可以从一列拖到另一列，表示从一个阶段进入另一个阶段。</p>

<p>许多<a href="https://github.com/marketplace/category/project-management">第三方工具</a>可以增强 Github 的看板功能，最著名的是 <a href="https://github.com/marketplace/zenhub">Zenhub</a>，这里就不详细介绍了。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082417.jpg" alt="img" /></p>

<h2 id="五码云的-issue-系统">五、码云的 Issue 系统</h2>

<p>除了 Github 以外，<a href="https://gitlab.com/">Gitlab</a> 也提供免费的 Issues 管理系统，而且 比前者更易用。但是，我不打算介绍它，而是想介绍<a href="http://www.oschina.net/">开源中国社区</a>推出的代码托管服务<a href="https://gitee.com/">码云</a>（<a href="https://gitee.com/">Gitee.com</a>）。</p>

<p><img src="https://www.wangbase.com/blogimg/asset/202006/bg2020061418.jpg" alt="img" /></p>

<p><a href="https://gitee.com/">码云</a>是基于 Gitlab 的深度重构，提供汉语界面，符合国人的使用习惯，并且访问速度极快，我感觉比 Gitlab 快了一个数量级。另一方面，开源中国的红薯老大一直支持我，我也想借这个机会，推广一下他们的产品，让更多的人知道这个优秀的国产 SaaS 服务。</p>

<h3 id="51-新建-issue">5.1 新建 Issue</h3>

<p>码云的每个仓库都有一个 <a href="https://gitee.com/moce-technology_demo/jfinal/issues">Issues 面板</a>。进入后，点击新建 Issue，就可以创建 Issue 了，里面的设置项比 Github 丰富好多。（注意，只有仓库的管理员才能看到设置项。）</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082435.jpg" alt="img" /></p>

<p>其中的”负责人”（Assignee）、”标签”（Label）、”里程碑”（Milestone）与 Github 完全一致。”关联分支”指定 Issue 归属于哪一个分支，”开始时间”和”结束时间”指定处理日程。”置顶选项”指定哪些 Issue 出现在最前面，而且还分成高中低三档。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082436.jpg" alt="img" /></p>

<p>由于设置多，所以 Issue 列表提供的过滤开关也多。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082434.jpg" alt="img" /></p>

<h3 id="52-看板功能">5.2 看板功能</h3>

<p>码云的<a href="https://gitee.com/moce-technology_demo/jfinal/board">看板功能</a>比 Github 更友好，直接提供四个现成的看板。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082437.jpg" alt="img" /></p>

<blockquote>
  <ul>
    <li>待处理</li>
    <li>进行中</li>
    <li>已完成</li>
    <li>已验收</li>
  </ul>
</blockquote>

<p>所有 Issue 的初始状态都是”待处理”，用户可以手动把它们拖到其他列。</p>

<h3 id="53-企业版">5.3 企业版</h3>

<p>码云跟 Gitlab 一样，也提供<a href="https://gitee.com/enterprises">企业版</a>。里面的<a href="http://git.oschina.net/hesheng168/dashboard/issues">“任务”</a>模块有一个强大的 Issue 全局视图，分成四种浏览模式。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082421.png" alt="img" /></p>

<blockquote>
  <ul>
    <li>指派给我的</li>
    <li>我发布的</li>
    <li>我参与的</li>
    <li>全部任务</li>
  </ul>
</blockquote>

<p>这是默认的列表视图，可以点击右上角，切换成全局的”看板视图”。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082439.png" alt="img" /></p>

<p>这个界面还可以直接新建任务，而不用进入仓库主页。新建任务时，允许指定”关联项目”、”负责人”和”预计工时”。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082422.jpg" alt="img" /></p>

<p>新建任务以后，还可以对任务进行再次编辑，这时可以设置”优先级”、”关联项目”和”子项目”等。</p>

<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017082424.jpg" alt="img" /></p>

<p>我就介绍到这里了，接下来你可以点击进入 <a href="https://gitee.com/enterprises/demo">Demo</a>，体验一下上面介绍的各项功能。</p>

<p>（完）</p>

<h1 id="熟练使用issues"><a href="https://blog.csdn.net/github_30605157/article/details/52837864">熟练使用Issues</a></h1>

<h1 id="声明">声明</h1>

<h2 id="github官方声明">Github官方声明</h2>

<p>This document is an unofficial translation of https://guides.github.com/features/issues/ and is not endorsed, maintained or overseen by GitHub. For official Help articles, please visit <a href="https://guides.github.com/">https://guides.github.com</a>.</p>

<h2 id="译者声明">译者声明</h2>

<p>本译文仅供参考，如有疑问请联系(chaoyanglius@outlook.com)译者或者参考原文https://guides.github.com/features/issues/，感谢您的支持。本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/">本作品采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可</a>，如需转载请遵守该协议内容并附上原文链接。</p>

<h1 id="简介">简介</h1>

<p>添加Issues是一种为你的项目跟踪任务(tasks)、强化(enhancements)以及bug的利器。它们有点类似于邮件，除了它们可以与团队的其他成员分享和讨论。大多数软件项目都会有某种bug跟踪器。而Github的跟踪器叫做<strong>Issues</strong>，在每个仓库上都会有自己的Issues部分。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214335.png" alt="github-issues" /></p>

<p>例如，我们可以看一下<a href="https://github.com/twbs/bootstrap/issues">bootstrap仓库的Issues部分</a>。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214422.png" alt="bootstrap-issues" /></p>

<p>因为Github强调合作、引用和美观的文本格式，所以它的issue跟踪十分特殊。下面是一个典型的Github issue：</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214442.png" alt="issue" /></p>

<ul>
  <li><strong>title</strong>(标题)和<strong>description</strong>(描述)描述了这个issue是关于什么的.</li>
  <li>不同颜色编码的<strong>labels</strong>(标签)可以帮助你对issues进行分类和过滤(就像邮箱中的标签一样).</li>
  <li><strong>milestones</strong>(里程碑)就像issues的容器一样。这对于关联特定特点或者项目阶段的issues十分有用(例如Weekly Sprint 9/5-9/16 or Shipping 1.0)。</li>
  <li><strong>assignee</strong>(受委托人)负责在任何指定的时间解决相应的issue.</li>
  <li><strong>Comments</strong>允许访问仓库并提供反馈.</li>
</ul>

<h1 id="milestones-labels-and-assignees">Milestones, Labels, and Assignees</h1>

<p>一旦你添加了足够多的issues，你就会发现你很难找到你所关注的issues。有了<strong>Milestones</strong>, <strong>Labels</strong>, and <strong>Assignees</strong>你就可以轻松地对issues进行分类和过滤。</p>

<p>你可以通过点击右侧边栏上相应的齿轮，来改变或添加milestone, assignee, and labels。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214500.png" alt="add-mla" /></p>

<p>如果你没有看到编辑按钮，那是因为你没有编辑issue的权限。你可以请求仓库管理者将你添加为合作者来获得相应的权限。</p>

<h2 id="milestones">Milestones</h2>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214509.png" alt="milestone" /></p>

<p>milestones(里程碑)是对应于项目，功能或时间段的issue组。人们在软件开发时，可以以不同的方式使用他们。下面是Github上的一些例子：</p>

<ul>
  <li><strong>Beta Launch</strong> — 在你发布项目的Beta版之前，你需要修复的文件bug。这样就能确保你不会漏掉什么。</li>
  <li><strong>October Sprint</strong> — 你应该在八月份之前解决的issues。这样当你有很多事要做时，你可以更好地集中精力。</li>
  <li><strong>Redesign</strong> — 涉及到重新设计项目的issues。这是一种收集想法的好方法。</li>
</ul>

<h2 id="lables">Lables</h2>

<p>label(标签)是管理issues类型的很好的方式。一个issue可以有多个label，而且你也可以一次通过多个label过滤出你想要的issue。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214526.png" alt="labels" /></p>

<h2 id="assignees">Assignees</h2>

<p>每个issue都会有一个assignee(受委托人)——负责推进issue的人。选择Assignees的方法与选择milestones的方法相同，都是通过issue上方的灰色栏。</p>

<h1 id="notifications-mentions-and-references">Notifications, @mentions, and References</h1>

<p>通过在issues中使用@mentions和references，你可以通知其他GitHub用户和团队，以及交叉连接issues(在一个issue中提到另一个issue)。这些提供了一种灵活的方式来让合适的人有效地解决问题，并且易于学习和使用。它们可以在GitHub中的所有文本中起作用——因为它们是<a href="https://help.github.com/categories/writing-on-github/">GitHub Flavored Markdown</a>文本格式化语法中的一部分。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214535.png" alt="intro-nmr" /></p>

<p>如果你想了解更多，可以看看<a href="https://guides.github.com/features/mastering-markdown/">Mastering Markdown</a>.</p>

<h2 id="notifications">Notifications</h2>

<p><a href="https://github.com/notifications">Notifications</a>(通知)是GitHub中随时了解你的issues的一种方式。通过它们，你可以找到仓库的新issues，或者知道什么时候有人需要你来推进issues。</p>

<p>有两种收到notifications的方式：通过邮箱和网页。你可以在你的<a href="https://github.com/settings/notifications">设置</a>中配置你接收notifications的方式。如果你计划收到很多notifications，我们推荐你在Participating中设置为web(网页)+email(邮箱)，而在Watching中设置web(网页)。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214542.png" alt="notifications-setting" /></p>

<p>通过这些设置，当人们特别提及您时，您会收到电子邮件，然后访问基于网络的界面，就可以随时了解您感兴趣的仓库。</p>

<p>你可以通过<a href="https://github.com/notifications">notifications</a>界面来访问你的notifications。这个界面对于一次浏览多个通知十分方便，而且也可以将通知标记为已读或者屏蔽消息。你可以使用快捷键来加快你的工作流程——在github页面下按下键盘上的<code class="language-plaintext highlighter-rouge">?</code>你就可以看到有哪些快捷键了。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214549.png" alt="notifications" /></p>

<p>被屏蔽的消息不会在以未读的状态出现，直到你再次被特别地@mentioned(提到)。这样你就可以屏蔽那些你不感兴趣的线程(可能是你不熟悉的子系统)。如果你将某个issue标记为已读，如果有人再次对这个消息进行评论的话，它的状态就会改变。</p>

<p>GitHub也会通过邮箱来同步已读/未读状态——如果你在你的邮箱客户端读了一条notification，那么在网页界面上的notification就会自动标记为已读(如果你喜欢这个功能，你就要确保你邮箱客户端允许显示图片)。</p>

<h2 id="mentions">@mentions</h2>

<p>我们可以通过@mentions在Github issues引用其他Github用户。我们可以在任何issues的描述或评论中使用它，也可以@username来向另一个Github用户发送notification。这很像twitter中的@mentions。</p>

<p>我们比较喜欢使用<code class="language-plaintext highlighter-rouge">/cc</code>语法将人们包含在issue中：</p>

<blockquote>
  <p>It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?</p>

  <p>/cc @kneath @jresig</p>
</blockquote>

<p>如果你指定要包括的人的话，它的效果会非常好，但是许多情况下，我们是跨团队工作，可能并不知道谁会帮助我们。@mentions对于GitHub组织中的团队也是起作用的。如果你在@acmeinc组织(organization)中创建了一个叫做browser-bugs的团队，你也可以通过@mentions来引用这个团队：</p>

<blockquote>
  <p>/cc @acmeinc/browser-bugs</p>
</blockquote>

<p>这样的话就会给团队的每个成员发送notifications。</p>

<h2 id="references">References</h2>

<p>issues经常是独立于其他issues的，或者至少与其他有关系而且你想将它们连接起来。你可以通过输入井号(#)+issue编号来引用issues。</p>

<blockquote>
  <p>Hey @kneath, I think the problem started in #42</p>
</blockquote>

<p>如果你想包含其他仓库的issues，你可以在前面加上仓库的名字，比如像这样：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kneath/example-project#42
</code></pre></div></div>

<p>有一种引用issues的更有趣的方式就是直接从commits中引用issues。你可以在提交信息中包含issue编号。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214558.png" alt="commit-issues" /></p>

<p>当你将提交合并到master分支时，以“Fixes”, “Fixed”, “Fix”, “Closes”, “Closed”, 或者“Close”开头的commits信息会自动关闭相应的issues。</p>

<p>引用这一功能将正在完成的工作与正在跟踪的bug紧紧联系在一起，而且它是也将项目历史得以可视化的好方法。</p>

<h1 id="搜索">搜索</h1>

<p>在每个页面的上方是一个搜索框，你可以通过它来搜索issues。</p>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200720214627.png" alt="search-box" /></p>

<p>你可以通过下面的方式检索搜索结果：</p>

<ul>
  <li>关键字，例如：<a href="https://github.com/twbs/bootstrap/issues?q=sidebar">提到sidebar的所有issues</a></li>
  <li>状态，例如：<a href="https://github.com/twbs/bootstrap/issues?q=sidebar+is%3Aclosed">提到sidebar的所有已关闭的issues</a></li>
  <li>受委托人，例如：<a href="https://github.com/twbs/bootstrap/issues?q=sidebar+is%3Aclosed+assignee%3Amdo">提到sidebar并分配给mdo的所有已关闭的issues</a></li>
</ul>

<p>这篇关于<a href="https://help.github.com/articles/using-search-to-filter-issues-and-pull-requests/">查找issues的帮助文档</a>会向你展示其他的搜索方式：使用创建或更新日期，标签，作者，评论数量，仓库主人或者更多。</p>

<h1 id="概况和报告">概况和报告</h1>

<p>在这个issues部分之外，还有两个页面用于帮助总结如何在你的仓库以及所有你的仓库中处理issues。</p>

<h2 id="issues面板">issues面板</h2>

<p>如果你正在寻找一个包含更多项目的所有issues的列表，issues面板将是一个非常好的工具。这个面板的工作方式与issues部分非常相似，但是收集的issues的方式是不同的：</p>

<ul>
  <li>所有你拥有的和参与的仓库的issues</li>
  <li>被分配给你的issues</li>
  <li>你创建的issues</li>
</ul>

<p>如果你使用了organizations(组织)，那么issues面板就会为每个organization划分一个issues面板。</p>

<h2 id="pulse">Pulse</h2>

<p>在每个仓库下面都会有一个叫做Pulse的部分——Pulse是该仓库过去一周(或者一天或者三个月)发生的所有活动的快照。</p>

<p><a href="https://guides.github.com/features/issues/pulse.png">pulse</a></p>

<p>通过它，你可以在你离开一段时间后，很快地赶上仓库进度并且不想在关注仓库时接收频繁的notifications。</p>

<h1 id="issues的其他用法">issues的其他用法</h1>

<p>issues可以用来跟踪各种东西——并且GitHub是一个上分享和合作issues的好地方。下面是一些我们最喜欢做的：</p>

<ul>
  <li><a href="https://github.com/frabcus/house/issues">跟踪你的房子问题</a>例如<a href="https://github.com/frabcus/house/issues/58">门没有被正常挂住</a></li>
  <li><a href="https://github.com/nodejs/node-v0.x-archive/issues">跟踪你的开源项目的bug</a></li>
  <li><a href="https://github.com/newmerator/recipes/issues/3">需要的菜谱</a>(可能你有一个无麸披萨的菜谱?)</li>
</ul>

<h1 id="结尾">结尾</h1>

<p>祝贺你读完了这么长的文章！issues管理器在任何开发者的处理中都是一个强有力的工具。我想现在要做的就是修复你的bug了。</p>

:ET