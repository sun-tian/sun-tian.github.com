I"<h1 id="leetcode-20-有效的括号">LeetCode-<a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1>

<iframe width="560" height="315" src="https://www.youtube.com/embed/4z5fmKMr9lU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>tag: easy，字符串</p>

<p><strong>题目：</strong></p>

<p>给定一个只包括 <code class="language-plaintext highlighter-rouge">'('</code>，<code class="language-plaintext highlighter-rouge">')'</code>，<code class="language-plaintext highlighter-rouge">'{'</code>，<code class="language-plaintext highlighter-rouge">'}'</code>，<code class="language-plaintext highlighter-rouge">'['</code>，<code class="language-plaintext highlighter-rouge">']'</code> 的字符串，判断字符串是否有效。</p>

<p>有效字符串需满足：</p>

<ol>
  <li>左括号必须用相同类型的右括号闭合。</li>
  <li>左括号必须以正确的顺序闭合。</li>
</ol>

<p>注意空字符串可被认为是有效字符串。</p>

<p><strong>示例 1:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: "()"
输出: true
</code></pre></div></div>

<p><strong>示例 2:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: "()[]{}"
输出: true
</code></pre></div></div>

<p><strong>示例 3:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: "(]"
输出: false
</code></pre></div></div>

<p><strong>示例 4:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: "([)]"
输出: false
</code></pre></div></div>

<p><strong>示例 5:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: "{[]}"
输出: true
</code></pre></div></div>

<h1 id="方法一">方法一：</h1>

<p>首先需要考虑的是找一个container去包括对应的括号，</p>

<p>第二是需要考虑是不是在一个正确的order里面。</p>

<p>关于第一个问题，可以用dictionary来创建一个查找的表格。</p>

<p>在for循环的时候，什么时候可以放到stack里面？就是在dictionary里能找到的时候，</p>

<p>齐次是去看是不是一个合适的order。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isValid</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">lookup</span> <span class="o">=</span> <span class="p">{</span><span class="s">"("</span><span class="p">:</span><span class="s">")"</span><span class="p">,</span> <span class="s">"{"</span><span class="p">:</span><span class="s">"}"</span><span class="p">,</span> <span class="s">"["</span><span class="p">:</span> <span class="s">"]"</span><span class="p">}</span>
        <span class="k">for</span> <span class="n">parenthese</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">parenthese</span> <span class="ow">in</span> <span class="n">lookup</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">parenthese</span><span class="p">)</span>
            <span class="c1"># 接下来判断是不是match的
</span>
            <span class="c1"># 比如{[]}，{在lookup里，先进stack, [在lookup里，再进stack里，]不在stack里，需要看和前面的括号是不是match
</span>            
            <span class="c1"># 还有一种情况，比如s = "]"，所以需要考虑stack的长度
</span>
            <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">lookup</span><span class="p">[</span><span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()]</span> <span class="o">!=</span> <span class="n">parenthese</span><span class="p">:</span> <span class="c1"># 使用stack.pop()找到最上面的值
</span>
                <span class="k">return</span> <span class="bp">False</span>
        
        <span class="c1"># 为什么要这么写？因为如果输入是"["的话，stack里有值，但不匹配，返回应该是FALSE，而不是true
</span>        
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">stack</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：36 ms, 在所有 Python3 提交中击败了91.23%的用户</p>

  <p>内存消耗：13.8 MB, 在所有 Python3 提交中击败了5.22%的用户</p>
</blockquote>
:ET