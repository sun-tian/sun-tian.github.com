I"d<h1 id="剑指-offer-42-连续子数组的最大和-53-最大子序和"><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a> <a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h1>

<p>tag: easy，数组，动态规划</p>

<p><strong>题目：</strong></p>

<p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。</p>

<p>要求时间复杂度为O(n)。</p>

<p><strong>示例一</strong>：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
</code></pre></div></div>

<h1 id="方法一动态规划">方法一：动态规划</h1>

<p>1.连续子数组的最大和,先分析两种极端情况：
[1]数组全为负数 如 nums = [-1，-2，-3，-4，-5] 连续子数组的最大和为 nums[0]
[2]数组中存在一个正数 如 nums = [-1，-2，1，-4，-5] 连续子数组的最大和为 nums[2] 1
可以看出要想获得最大连续的子数组和，必须添加进去的数字为正数
2.很容易想到动态规划：
[1]初始条件 maxnum = nums[0]
[2]开始循环遍历
[3]当数值大于零的时候 nums[i-1] &gt;0 ，需要添加进求和项,直接在元素组上修改 nums[i] += last_num
[4]状态转移方程： maxnum = max(maxnum, nums[i]) 判断上一个的连续子数组求和最大值与当前的大小关系</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">maxnum</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="n">last_num</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">last_num</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">last_num</span>
            <span class="n">maxnum</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">maxnum</span><span class="p">,</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">maxnum</span>
</code></pre></div></div>

<p><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/si-lu-jian-dan-xing-neng-jie-jin-70-by-jamleon/">Link</a></p>

<p>我们在原地修改数组，将数组每个位置的值更改为当前位置上的最大和。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">maxSubArray</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="c1"># 动态规划，原地修改数组
</span>        <span class="n">maxnum</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
            <span class="n">maxnum</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">maxnum</span><span class="p">,</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">maxnum</span>
</code></pre></div></div>

<p>- 时间复杂度：O(N)，遍历了一次数组。
- 空间复杂度：O(1)，使用了常数空间。</p>

<blockquote>
  <p>执行用时：72 ms, 在所有 Python3 提交中击败了86.93%的用户</p>

  <p>内存消耗：17.7 MB, 在所有 Python3 提交中击败了68.11%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/dong-tai-gui-hua-by-ml-zimingmeng-2/">Link</a></p>
:ET