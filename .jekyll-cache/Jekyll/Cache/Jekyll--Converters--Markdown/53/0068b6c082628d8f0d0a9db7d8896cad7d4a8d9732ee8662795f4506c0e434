I"|<h1 id="leetcode-38-外观数列">LeetCode-<a href="https://leetcode-cn.com/problems/count-and-say/">38. 外观数列</a></h1>

<iframe width="560" height="315" src="https://www.youtube.com/embed/zOOKD2OBIUY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>tag: easy，字符串</p>

<p><strong>题目：</strong></p>

<p>给定一个正整数 n（1 ≤ n ≤ 30），输出外观数列的第 n 项。</p>

<p>注意：整数序列中的每一项将表示为一个字符串。</p>

<p>「外观数列」是一个整数序列，从数字 1 开始，序列中的每一项都是对前一项的描述。前五项如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.     1
2.     11
3.     21
4.     1211
5.     111221
</code></pre></div></div>

<p>第一项是数字 1</p>

<p>描述前一项，这个数是 1 即 “一个 1 ”，记作 11</p>

<p>描述前一项，这个数是 11 即 “两个 1 ” ，记作 21</p>

<p>描述前一项，这个数是 21 即 “一个 2 一个 1 ” ，记作 1211</p>

<p>描述前一项，这个数是 1211 即 “一个 1 一个 2 两个 1 ” ，记作 111221</p>

<p><strong>示例1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: 1
输出: "1"
解释：这是一个基本样例。
</code></pre></div></div>

<p><strong>示例2：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: haystack = "aaaaa", needle = "bba"
输出: -1
</code></pre></div></div>

<p><strong>说明:</strong></p>

<p>当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p>

<p>对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p>

<h1 id="方法一">方法一：</h1>

<p>先写for loop，i不会是从第一开始到结尾，因为…，range应该是len(haystack)-len(needle)+1，</p>

<p>然后两两的找有没有跟needle相同的排序，每次从haystack提出两个去做比较，如果存在就返回i，</p>

<p>i就是needle起始的位置，</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">strStr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">haystack</span><span class="p">,</span> <span class="n">needle</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">haystack</span><span class="p">)</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">needle</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">haystack</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="nb">len</span><span class="p">(</span><span class="n">needle</span><span class="p">)]</span> <span class="o">==</span> <span class="n">needle</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">i</span> 
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：44 ms, 在所有 Python3 提交中击败了61.81%的用户</p>

  <p>内存消耗：13.9 MB, 在所有 Python3 提交中击败了6.67%的用户</p>
</blockquote>
:ET