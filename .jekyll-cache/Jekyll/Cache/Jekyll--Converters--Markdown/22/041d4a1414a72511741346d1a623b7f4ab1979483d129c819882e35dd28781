I"^<h1 id="leetcode-20-有效的括号">LeetCode-<a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h1>

<iframe width="560" height="315" src="https://www.youtube.com/embed/4z5fmKMr9lU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>tag: easy，字符串</p>

<p><strong>题目：</strong></p>

<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>

<p>如果不存在公共前缀，返回空字符串 <code class="language-plaintext highlighter-rouge">""</code>。</p>

<p><strong>示例 1:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: ["flower","flow","flight"]
输出: "fl"
</code></pre></div></div>

<p><strong>示例 2:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: ["dog","racecar","car"]
输出: ""
解释: 输入不存在公共前缀。
</code></pre></div></div>

<h1 id="方法一straightforward">方法一：Straightforward</h1>

<p>得先设计一个标杆，跟每一个词去比，就定为第一个，这样去从第二个go loop比较。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">strs</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">""</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">])):</span>
            <span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="n">strs</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
                <span class="c1"># 要先判断长度再进行比较，要不然容易out of range，因为string[i]取不到
</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="ow">or</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]:</span> 
                    <span class="k">return</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">][:</span><span class="n">i</span><span class="p">]</span>

        <span class="c1"># 这是为了防止字符串中是一个空的字串[""]
</span>        
        <span class="k">return</span> <span class="n">strs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：36 ms, 在所有 Python3 提交中击败了93.19%的用户</p>

  <p>内存消耗：13.8 MB, 在所有 Python3 提交中击败了6.15%的用户</p>
</blockquote>

<h1 id="方法二">方法二：</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">longestCommonPrefix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">strs</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="s">''</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="c1"># 第i个位置set的情况，比如i=0,就只有一个f，i=1,就只有一个l，i=2,就有o和i两个了
</span>
                <span class="n">sets</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">string</span> <span class="ow">in</span> <span class="n">strs</span><span class="p">)</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sets</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="n">sets</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">break</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="k">break</span>
        <span class="k">return</span> <span class="n">result</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：44 ms, 在所有 Python3 提交中击败了61.03%的用户</p>

  <p>内存消耗：13.8 MB, 在所有 Python3 提交中击败了6.15%的用户</p>
</blockquote>
:ET