I"0"<h1 id="剑指-offer-07-重建二叉树"><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/">剑指 Offer 07. 重建二叉树</a></h1>

<p>tag: medium，递归，树</p>

<p><strong>题目：</strong></p>

<p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>

<p>例如，给出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
</code></pre></div></div>

<p>返回如下的二叉树：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre></div></div>

<h1 id="方法一递归法">方法一：递归法</h1>

<p>题目分析：
前序遍历特点： 节点按照 [ 根节点 | 左子树 | 右子树 ] 排序，以题目示例为例：[ 3 | 9 | 20 15 7 ]
中序遍历特点： 节点按照 [ 左子树 | 根节点 | 右子树 ] 排序，以题目示例为例：[ 9 | 3 | 15 20 7 ]
根据题目描述输入的前序遍历和中序遍历的结果中都不含重复的数字，其表明树中每个节点值都是唯一的。</p>

<p>根据以上特点，可以按顺序完成以下工作：</p>

<p>前序遍历的首个元素即为根节点 root 的值；
在中序遍历中搜索根节点 root 的索引 ，可将中序遍历划分为 [ 左子树 | 根节点 | 右子树 ] 。
根据中序遍历中的左（右）子树的节点数量，可将前序遍历划分为 [ 根节点 | 左子树 | 右子树 ] 。
自此可确定 三个节点的关系 ：1.树的根节点、2.左子树根节点、3.右子树根节点（即前序遍历中左（右）子树的首个元素）。</p>

<table>
  <tbody>
    <tr>
      <td>子树特点： 子树的前序和中序遍历仍符合以上特点，以题目示例的右子树为例：前序遍历：[20</td>
      <td>15</td>
      <td>7]，中序遍历 [ 15</td>
      <td>20</td>
      <td>7 ] 。</td>
    </tr>
  </tbody>
</table>

<p>根据子树特点，我们可以通过同样的方法对左（右）子树进行划分，每轮可确认三个节点的关系 。此递推性质让我们联想到用 递归方法 处理。
递归解析：
递推参数： 前序遍历中根节点的索引pre_root、中序遍历左边界in_left、中序遍历右边界in_right。
终止条件： 当 in_left &gt; in_right ，子树中序遍历为空，说明已经越过叶子节点，此时返回 nullnull 。
递推工作：
建立根节点root： 值为前序遍历中索引为pre_root的节点值。
搜索根节点root在中序遍历的索引i： 为了提升搜索效率，本题解使用哈希表 dic 预存储中序遍历的值与索引的映射关系，每次搜索的时间复杂度为 O(1)O(1)。
构建根节点root的左子树和右子树： 通过调用 recur() 方法开启下一层递归。
左子树： 根节点索引为 pre_root + 1 ，中序遍历的左右边界分别为 in_left 和 i - 1。
右子树： 根节点索引为 i - in_left + pre_root + 1（即：根节点索引 + 左子树长度 + 1），中序遍历的左右边界分别为 i + 1 和 in_right。
返回值： 返回 root，含义是当前递归层级建立的根节点 root 为上一递归层级的根节点的左或右子节点。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">buildTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">preorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">inorder</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">TreeNode</span><span class="p">:</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">dic</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">po</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">preorder</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">inorder</span><span class="p">)):</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">dic</span><span class="p">[</span><span class="n">inorder</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">recur</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">inorder</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">recur</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pre_root</span><span class="p">,</span> <span class="n">in_left</span><span class="p">,</span> <span class="n">in_right</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">in_left</span> <span class="o">&gt;</span> <span class="n">in_right</span><span class="p">:</span> <span class="k">return</span> <span class="c1"># 终止条件：中序遍历为空
</span>        <span class="n">root</span> <span class="o">=</span> <span class="n">TreeNode</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">po</span><span class="p">[</span><span class="n">pre_root</span><span class="p">])</span> <span class="c1"># 建立当前子树的根节点
</span>        <span class="n">i</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">dic</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">po</span><span class="p">[</span><span class="n">pre_root</span><span class="p">]]</span>    <span class="c1"># 搜索根节点在中序遍历中的索引，从而可对根节点、左子树、右子树完成划分。
</span>        <span class="n">root</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">recur</span><span class="p">(</span><span class="n">pre_root</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">in_left</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># 开启左子树的下层递归
</span>        <span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">recur</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">in_left</span> <span class="o">+</span> <span class="n">pre_root</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">in_right</span><span class="p">)</span> <span class="c1"># 开启右子树的下层递归
</span>        <span class="k">return</span> <span class="n">root</span> <span class="c1"># 返回根节点，作为上层递归的左（右）子节点
</span></code></pre></div></div>

<ul>
  <li><strong>时间复杂度 O(N)：</strong> 遍历链表，递归 N<em>N</em> 次。</li>
  <li><strong>空间复杂度 O(N)：</strong> 系统递归需要使用 O(N)的栈空间。</li>
</ul>

<blockquote>
  <p>执行用时：60 ms, 在所有 Python3 提交中击败了79.42%的用户</p>

  <p>内存消耗：17.4 MB, 在所有 Python3 提交中击败了91.75%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof/solution/mian-shi-ti-07-zhong-jian-er-cha-shu-di-gui-fa-qin/">Link</a></p>

:ET