I"8<h1 id="剑指-offer-55---ii-平衡二叉树-110-平衡二叉树"><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/">剑指 Offer 55 - II. 平衡二叉树</a> <a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></h1>

<p>tag: easy，二叉树，递归</p>

<p><strong>题目：</strong></p>

<p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>

<p>本题中，一棵高度平衡二叉树定义为：</p>

<blockquote>
  <p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过1。</p>
</blockquote>

<p><strong>示例1：</strong></p>

<p>给定二叉树 <code class="language-plaintext highlighter-rouge">[3,9,20,null,null,15,7]</code>，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre></div></div>

<p>返回 <code class="language-plaintext highlighter-rouge">true</code> 。</p>

<p><strong>示例2：</strong></p>

<p>给定二叉树 <code class="language-plaintext highlighter-rouge">[1,2,2,3,3,null,null,4,4]</code>，</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
</code></pre></div></div>

<p>返回 <code class="language-plaintext highlighter-rouge">false</code> 。</p>

<h1 id="方法一从顶至底暴力法">方法一：从顶至底（暴力法）</h1>

<blockquote>
  <p>此方法容易想到，但会产生大量重复计算，时间复杂度较高。</p>
</blockquote>

<p>思路是构造一个获取当前节点最大深度的方法 depth(root) ，通过比较此子树的左右子树的最大高度差abs(depth(root.left) - depth(root.right))，来判断此子树是否是二叉平衡树。若树的所有子树都平衡时，此树才平衡。</p>

<p><strong>算法流程：</strong></p>

<ul>
  <li>isBalanced(root) ：判断树 root 是否平衡
    <ul>
      <li>特例处理： 若树根节点 root 为空，则直接返回 true ；</li>
      <li>返回值： 所有子树都需要满足平衡树性质，因此以下三者使用与逻辑 \&amp;\&amp;&amp;&amp; 连接；
        <ol>
          <li>abs(self.depth(root.left) - self.depth(root.right)) &lt;= 1 ：判断 当前子树 是否是平衡树；</li>
          <li>self.isBalanced(root.left) ： 先序遍历递归，判断 当前子树的左子树 是否是平衡树；</li>
          <li>self.isBalanced(root.right) ： 先序遍历递归，判断 当前子树的右子树 是否是平衡树；</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>depth(root) ： 计算树 root 的最大高度</li>
  <li>终止条件： 当 root 为空，即越过叶子节点，则返回高度 00 ；</li>
  <li>返回值： 返回左 / 右子树的最大高度加 11 。</li>
</ul>

<p><strong>复杂度分析：</strong></p>

<ul>
  <li>时间复杂度 O(Nlog_2 N)： 最差情况下， isBalanced(root) 遍历树所有节点，占用 O(N) ；判断每个节点的最大高度 depth(root) 需要遍历 各子树的所有节点 ，子树的节点数的复杂度为 O(log_2 N)。</li>
  <li>空间复杂度 O(N)： 最差情况下（树退化为链表时），系统递归需要使用 O(N) 的栈空间。</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isBalanced</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">depth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="o">-</span> <span class="bp">self</span><span class="p">.</span><span class="n">depth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="ow">and</span> \
            <span class="bp">self</span><span class="p">.</span><span class="n">isBalanced</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">isBalanced</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">depth</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">depth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">),</span> <span class="bp">self</span><span class="p">.</span><span class="n">depth</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：72 ms, 在所有 Python3 提交中击败了51.20%的用户</p>

  <p>内存消耗：16.9 MB, 在所有 Python3 提交中击败了93.75%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/solution/balanced-binary-tree-di-gui-fang-fa-by-jin40789108/">Link</a></p>
:ET