I"#<h1 id="剑指-offer-28-对称的二叉树"><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h1>

<p>tag: easy，递归，二叉树</p>

<p><strong>题目：</strong></p>

<p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p>

<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>

<p>1
  / <br />
 2  2
 / \ / <br />
3  4 4  3</p>

<p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p>

<p>1
  / <br />
 2  2
  \  <br />
  3   3</p>

<p><strong>示例 1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：root = [1,2,2,3,4,4,3]
输出：true
</code></pre></div></div>

<p><strong>示例 1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：root = [1,2,2,null,3,null,3]
输出：false
</code></pre></div></div>

<h1 id="方法一递归法">方法一：递归法</h1>

<blockquote>
  <p>二叉树镜像定义： 对于二叉树中任意节点 root，设其左 / 右子节点分别为 left, right ；则在二叉树的镜像中的对应 root节点，其左 / 右子节点分别为 right, left 。</p>
</blockquote>

<ul>
  <li>解题思路：
    <ul>
      <li>对称二叉树定义： 对于树中 任意两个对称节点 L 和 R ，一定有：
        <ul>
          <li>L.val = R.val：即此两对称节点值相等。</li>
          <li>L.left.val = R.right.val：即 L 的 左子节点 和 R 的 右子节点 对称；</li>
          <li>L.right.val = R.left.val：即 LL 的 右子节点 和 RR 的 左子节点 对称。</li>
        </ul>
      </li>
      <li>根据以上规律，考虑从顶至底递归，判断每对节点是否对称，从而判断树是否为对称二叉树。</li>
    </ul>
  </li>
  <li>算法流程：</li>
  <li>isSymmetric(root) ：
    <ul>
      <li>特例处理： 若根节点 root 为空，则直接返回 true 。</li>
      <li>返回值： 即 recur(root.left, root.right) ;</li>
    </ul>
  </li>
  <li>recur(L, R) ：</li>
  <li>终止条件：
    <ul>
      <li>当 L 和 R 同时越过叶节点： 此树从顶至底的节点都对称，因此返回 true ；</li>
      <li>当 L 或 R 中只有一个越过叶节点： 此树不对称，因此返回 false ；</li>
      <li>当节点 L 值≠节点 R 值： 此树不对称，因此返回 false ；</li>
    </ul>
  </li>
  <li>递推工作：
    <ul>
      <li>判断两节点 L.left 和 R.right 是否对称，即 recur(L.left, R.right) ；</li>
      <li>判断两节点 L.right和R.leftt 是否对称，即 recur(L.right, R.left) ；</li>
    </ul>
  </li>
  <li>
    <p>返回值： 两对节点都对称时，才是对称树，因此用与逻辑符 &amp;&amp; 连接。</p>
  </li>
  <li>复杂度分析：
    <ul>
      <li>时间复杂度 O(N)： 其中 N 为二叉树的节点数量，每次执行 recur() 可以判断一对节点是否对称，因此最多调用 N/2次 recur() 方法。</li>
      <li>空间复杂度 O(N) ： 最差情况下（见下图），二叉树退化为链表，系统使用 O(N) 大小的栈空间。</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isSymmetric</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">recur</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">R</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">L</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">R</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">L</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">R</span> <span class="ow">or</span> <span class="n">L</span><span class="p">.</span><span class="n">val</span> <span class="o">!=</span> <span class="n">R</span><span class="p">.</span><span class="n">val</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="k">return</span> <span class="n">recur</span><span class="p">(</span><span class="n">L</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">R</span><span class="p">.</span><span class="n">right</span><span class="p">)</span> <span class="ow">and</span> <span class="n">recur</span><span class="p">(</span><span class="n">L</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">R</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">recur</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span> <span class="k">if</span> <span class="n">root</span> <span class="k">else</span> <span class="bp">True</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：40 ms, 在所有 Python3 提交中击败了90.28%的用户</p>

  <p>内存消耗：13.2 MB, 在所有 Python3 提交中击败了100.00%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/solution/mian-shi-ti-28-dui-cheng-de-er-cha-shu-di-gui-qing/">Link</a></p>
:ET