I"]<h1 id="剑指-offer-09-用两个栈实现队列"><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h1>

<p>tag: medium，递归，树</p>

<p><strong>题目：</strong></p>

<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p>

<p><strong>示例1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：
["CQueue","appendTail","deleteHead","deleteHead"]
[[],[3],[],[]]
输出：[null,null,3,-1]
</code></pre></div></div>

<p><strong>示例2：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：
["CQueue","deleteHead","appendTail","appendTail","deleteHead","deleteHead"]
[[],[],[5],[2],[],[]]
输出：[null,-1,null,null,5,2]
</code></pre></div></div>

<h1 id="方法一递归法">方法一：递归法</h1>

<ul>
  <li>栈无法实现队列功能： 栈底元素（对应队首元素）无法直接删除，需要将上方所有元素出栈。</li>
  <li>双栈可实现列表倒序： 设有含三个元素的栈 A = [1,2,3]和空栈 B = []。若循环执行 A 元素出栈并添加入栈 B ，直到栈 A 为空，则 A = [] , B = [3,2,1] ，即 栈 B 元素实现栈 A 元素倒序 。</li>
  <li>利用栈 B 删除队首元素： 倒序后，B 执行出栈则相当于删除了 A 的栈底元素，即对应队首元素。</li>
</ul>

<p>我们可以设计栈 <code class="language-plaintext highlighter-rouge">A</code> 用于加入队尾操作，栈 <code class="language-plaintext highlighter-rouge">B</code> 用于将元素倒序，从而实现删除队首元素。</p>

<ul>
  <li>加入队尾 appendTail()函数： 将数字 val 加入栈 A 即可。</li>
  <li>删除队首deleteHead()函数： 有以下三种情况。
    <ul>
      <li>当栈 B 不为空： B中仍有已完成倒序的元素，因此直接返回 B 的栈顶元素。</li>
      <li>否则，当 A 为空： 即两个栈都为空，无元素，因此返回 -1−1 。</li>
      <li>否则： 将栈 A 元素全部转移至栈 B 中，实现元素倒序，并返回栈 B 的栈顶元素。</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">CQueue</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">A</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">B</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
       
    <span class="k">def</span> <span class="nf">appendTail</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">deleteHead</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">B</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">A</span><span class="p">:</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">while</span> <span class="bp">self</span><span class="p">.</span><span class="n">A</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">A</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">B</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>时间复杂度： appendTail()函数为 O(1) ；deleteHead() 函数在 N 次队首元素删除操作中总共需完成 N 个元素的倒序。</li>
  <li>空间复杂度 O(N)： 最差情况下，栈 A 和 B 共保存 N 个元素。</li>
</ul>

<blockquote>
  <p>执行用时：580 ms, 在所有 Python3 提交中击败了55.50%的用户</p>

  <p>内存消耗：16.9 MB, 在所有 Python3 提交中击败了76.19%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-2/">Link</a></p>

:ET