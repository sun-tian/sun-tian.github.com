I"q<h1 id="剑指-offer-06-从尾到头打印链表"><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/">剑指 Offer 06. 从尾到头打印链表</a></h1>

<p>tag: easy，递归，栈，链表</p>

<p><strong>题目：</strong></p>

<p><strong>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</strong></p>

<p><strong>示例1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：head = [1,3,2]
输出：[2,3,1]
</code></pre></div></div>

<h1 id="方法一递归法">方法一：递归法</h1>

<p>利用递归，先走至链表末端，回溯时依次将节点值加入列表 ，这样就可以实现链表值的倒序输出。</p>

<ul>
  <li>递推阶段： 每次传入 head.next ，以 head == None（即走过链表尾部节点）为递归终止条件，此时返回空列表 [] 。</li>
  <li>回溯阶段： 利用 Python 语言特性，递归回溯时每次返回 当前 list + 当前节点值 [head.val] ，即可实现节点的倒序输出。</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reversePrint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">reversePrint</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="nb">next</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">head</span><span class="p">.</span><span class="n">val</span><span class="p">]</span> <span class="k">if</span> <span class="n">head</span> <span class="k">else</span> <span class="p">[]</span>
</code></pre></div></div>

<ul>
  <li><strong>时间复杂度 O(N)：</strong> 遍历链表，递归 N<em>N</em> 次。</li>
  <li><strong>空间复杂度 O(N)：</strong> 系统递归需要使用 O(N)的栈空间。</li>
</ul>

<blockquote>
  <p>执行用时：140 ms, 在所有 Python3 提交中击败了9.77%的用户</p>

  <p>内存消耗：22.9 MB, 在所有 Python3 提交中击败了8.29%的用户</p>
</blockquote>

<h1 id="方法二辅助栈法">方法二：辅助栈法</h1>

<ul>
  <li>
    <p>入栈： 遍历链表，将各节点值 push 入栈。（Python 使用 append() 方法，Java借助 LinkedList 的addLast()方法）。</p>
  </li>
  <li>
    <p>出栈： 将各节点值 pop 出栈，存储于数组并返回。（Python 直接返回 stack 的倒序列表，Java 新建一个数组，通过 popLast() 方法将各元素存入数组，实现倒序输出）。</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">Node</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">reversePrint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">head</span><span class="p">):</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="n">head</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">head</span><span class="p">.</span><span class="n">val</span><span class="p">)</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="p">.</span><span class="nb">next</span>
        <span class="k">return</span> <span class="n">stack</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<ul>
  <li>
    <p>时间复杂度 O(N)O(N)： 入栈和出栈共使用 O(N)O(N) 时间。</p>
  </li>
  <li>
    <p>空间复杂度 O(N)： 辅助栈 stack 和数组 res 共使用 O(N) 的额外空间。</p>
  </li>
</ul>

<blockquote>
  <p>执行用时：40 ms, 在所有 Python3 提交中击败了95.51%的用户</p>

  <p>内存消耗：15.4 MB, 在所有 Python3 提交中击败了27.68%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution/mian-shi-ti-06-cong-wei-dao-tou-da-yin-lian-biao-d/">Link</a></p>

:ET