I"<h1 id="offer03-数组中重复的数">offer03-数组中重复的数</h1>

<p>’’’</p>

<p>找出数组中重复的数字。</p>

<p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。
数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。
请找出数组中任意一个重复的数字。
例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p>

<p><strong>示例 1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：
[2, 3, 1, 0, 2, 5, 3]
输出：2 或 3 
</code></pre></div></div>

<p>’’’</p>

<p>方法一：哈希表（最自然，但是要额外空间）
最容易想到用哈希表判重，这种方法是最自然的。</p>

<p>特别地，在数组的长度不超过 3232 的时候，使用位运算的技巧可以实现 O(1)O(1) 空间复杂度判重，但是这道题不是回溯算法的问题，题目给出的测试用例的长度肯定不止 32 位，因此，不建议使用位运算的技巧。</p>

<p>分析：这种方法不修改原始数组，但是使用了 O(N)O(N) 空间，使用空间换时间，是最正常的思路，时间复杂度是 O(N)O(N)。</p>

<p>方法二：排序（也比较容易想到，但是要排序，复杂度高）
排序以后，再遍历一遍就知道哪个重复了。</p>

<p>分析：这个方法其实比较容易想到，但是时间复杂度是 O(N \log N)O(NlogN)，同时也修改了原始数组。</p>

<p>方法三：把数组视为哈希表（有一类问题是这么做的，但是会修改数组）</p>

<ul>
  <li>由于数组元素的值都在指定的范围内，这个范围恰恰好与数组的下标可以一一对应；</li>
  <li>因此看到数值，就可以知道它应该放在什么位置，这里数字nums[i] 应该放在下标为 i 的位置上，这就像是我们人为编写了哈希函数，这个哈希函数的规则还特别简单；</li>
  <li>而找到重复的数就是发生了哈希冲突；</li>
  <li>类似问题还有「力扣」第 41 题： 缺失的第一个正数、「力扣」第 442 题： 数组中重复的数据、「力扣」第 448 题： 找到所有数组中消失的数字 。
  分析：这个思路利用到了数组的元素值的范围恰好和数组的长度是一样的，因此数组本身可以当做哈希表来用。遍历一遍就可以找到重复值，但是修改了原始数组。</li>
</ul>

<p>复杂度分析：</p>

<ul>
  <li>时间复杂度：O(N)O(N)，这里 NN 是数组的长度。虽然 for 循环里面套了 while，但是每一个数来到它应该在的位置以后，位置就不会再变化。这里用到的是均摊复杂度分析的方法：如果在某一个位置 while 循环体执行的次数较多，那么一定在后面的几个位置，根本不会执行 while 循环体内的代码，也就是说最坏的情况不会一直出现。也就是说最坏复杂度的情况不会一直出现。</li>
  <li>空间复杂度：O(1)O(1)。</li>
</ul>

<p>方法四：二分法（为了不修改数组，要遍历数组很多遍）
由于要确定的数字是有范围的整数，因此可以使用二分法来确定这个数，这就是「力扣」第 278 题：“寻找重复数”，题目有一点点不一样，但思想是一样。</p>

<p>分析：这种做法，不修改原始数组，不使用额外空间（即不像使用哈希表的方法那样，使用 O(N)O(N) 空间），但是看了数组很多遍，是很反常的“使用时间换空间”的做法。</p>

<p>原地交换</p>

<p>解题思路：
寻找数组中的重复数字，直接想到的方法是遍历数组，并使用 HashMap 统计每个数字的数量，遇到数量大于 11 的数字则返回。此方法时间复杂度和空间复杂度均为 O(N)O(N) 。</p>

<p>题目指出 在一个长度为 n 的数组 nums 里的所有数字都在 0 ~ n-1 的范围内 。 因此，可遍历数组并通过交换操作使元素的 索引 与 值 一一对应（即 nums[i] = i ）。因而，就能通过索引找到对应的值。</p>

<p>遍历中，当第二次遇到数字 x 时，一定有 nums[x] = x （因为第一次遇到 x 时已经将其交换至 nums[x] 处了）。利用以上方法，即可得到一组重复数字。</p>

<p>算法流程
遍历数组 nums ，设索引初始值为 i = 0:
若 nums[i] == i ： 说明此数字已在对应索引位置，无需交换，因此执行 i += 1 与 continue ；
若 nums[nums[i]] == nums[i] ： 说明索引 nums[i] 处的元素值也为 nums[i]，即找到一组相同值，返回此值 nums[i]；
否则： 当前数字是第一次遇到，因此交换索引为 i 和 nums[i] 的元素值，将此数字交换至对应索引位置。
若遍历完毕尚未返回，则返回 -1−1 ，代表数组中无相同值。
复杂度分析：
时间复杂度 O(N)O(N) ： 遍历数组使用 O(N)O(N) ，每轮遍历的判断和交换操作使用 O(1)O(1) 。
空间复杂度 O(1)O(1) ： 使用常数复杂度的额外空间。</p>

:ET