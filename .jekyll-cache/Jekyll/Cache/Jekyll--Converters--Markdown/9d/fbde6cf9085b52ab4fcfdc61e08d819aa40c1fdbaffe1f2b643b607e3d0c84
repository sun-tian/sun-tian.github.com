I"<h1 id="leetcode-35-搜索插入位置httpsleetcode-cncomproblemsremove-element">LeetCode-<a href="https://leetcode-cn.com/problems/search-insert-position/">35. 搜索插入位置</a>https://leetcode-cn.com/problems/remove-element/)</h1>

<iframe width="560" height="315" src="https://www.youtube.com/embed/BuREaaqmxWc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<p>tag: easy，数组</p>

<p><strong>题目：</strong></p>

<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>

<p>你可以假设数组中无重复元素。</p>

<p><strong>示例 1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: [1,3,5,6], 5
输出: 2
</code></pre></div></div>

<p><strong>示例 2:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: [1,3,5,6], 2
输出: 1
</code></pre></div></div>

<p><strong>示例 3:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: [1,3,5,6], 7
输出: 4
</code></pre></div></div>

<p><strong>示例 4:</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: [1,3,5,6], 0
输出: 0
</code></pre></div></div>

<h1 id="方法一">方法一：</h1>

<p>要判断两种情况，一种是target在array中，另一种是不存在，</p>

<p>其实，如果不在，就插入到左右数字的中间位置，如果等于，那就返回index，所以可以用一个等式去写满足这两种条件的，</p>

<p>为了节省空间，先去比较target与最大的值，如果target值已经大于最大的值，那就直接insert到最后，就不需要go over所有的nums，那就是 if target &gt; nums[len(nums) - 1]:  return len(nums)</p>

<p>剩下就要去遍历nums，判断nums[i]与target之间的关系，如果nums[i]≥target的话，就返回nums[i]的index</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">searchInsert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">target</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]:</span>
            <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">i</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：40 ms, 在所有 Python3 提交中击败了74.69%的用户</p>

  <p>内存消耗：14.3 MB, 在所有 Python3 提交中击败了7.14%的用户</p>
</blockquote>

:ET