I"&<h1 id="git总结">Git总结</h1>

<h1 id="常用命令"><strong>常用命令</strong></h1>

<p><img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@master/assets/picgoimg/20200702074824.png" alt="image-20200702074822226" /></p>

<ul>
  <li>Workspace：工作区（clone或者原始内容）</li>
  <li>Index/Stage：暂存区（有增删改查后add到临时区）</li>
  <li>Repository：本地仓库（保存了本地的增删改查记录）</li>
  <li>Remote：远程仓库（git.code.oa.com，本地的记录提交到远端，供团队所有人查看使用）</li>
</ul>

<h1 id="基础命令"><strong>基础命令</strong></h1>

<h2 id="初始化"><strong>初始化</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init git_test

# 下载一个项目和它的整个代码历史
$ git clone http://git.code.oa.com/jaelintu/git_test
</code></pre></div></div>

<h2 id="增加删除文件"><strong>增加/删除文件</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 添加指定文件到暂存区
$ git add file1 file2...

# 添加指定目录到暂存区，包括子目录
$ git add dir

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm file1 file2 ...
</code></pre></div></div>

<h2 id="代码提交"><strong>代码提交</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 提交暂存区到仓库区
$ git commit -m "message"

# 提交暂存区的指定文件到仓库区
$ git commit file1 file2 ... -m "message"

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m "message"

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend file1 file2 ...
</code></pre></div></div>

<h2 id="分支"><strong>分支</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch name

# 新建一个分支，并切换到该分支
$ git checkout -b branch

# 新建一个分支，指向指定commit
$ git branch name commit_SHA

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track name orgin/name

# 切换到指定分支，并更新工作区
$ git checkout name

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream name origin/name

# 合并指定分支到当前分支
$ git merge branch-name

# 选择一个commit，合并进当前分支
$ git cherry-pick commit_SHA

# 删除分支
$ git branch -d branch-name

# 删除远程分支
$ git push origin --delete branch-name
$ git branch -dr remote/branch
</code></pre></div></div>

<h2 id="tags"><strong>tags</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag tag-name

# 新建一个tag在指定commit
$ git tag tag-name commit-SHA

# 删除本地tag
$ git tag -d tag-name

# 删除远程tag
$ git push origin :refs/tags/tag-Name

# 查看tag信息
$ git show tag-name

# 提交指定tag
$ git push origin tag-name

# 提交所有tag
$ git push origin --tags

# 新建一个分支，指向某个tag
$ git checkout -b branch-name tag-name
</code></pre></div></div>

<h2 id="查看信息"><strong>查看信息</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动
$ git log (tag-name||commit-SHA) HEAD

# 显示某个文件的版本历史，包括文件改名
$ git log --follow file
$ git whatchanged file

# 显示指定文件相关的每一次diff
$ git log -p file

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame file

# 显示暂存区和工作区的代码差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached file

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show commit-SHA

# 显示某次提交发生变化的文件
$ git show --name-only commit-SHA

# 显示某次提交时，某个文件的内容
$ git show commit-SHA:filename

# 显示当前分支的最近几次提交
$ git reflog

# 从本地master拉取代码更新当前分支：branch 一般为master
$ git rebase branch-name
</code></pre></div></div>

<h2 id="远程同步"><strong>远程同步</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 下载远程仓库的所有变动
$ git fetch origin

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show origin

# 增加一个新的远程仓库，并命名
$ git remote add shortname url

# 取回远程仓库的变化，并与本地分支合并
$ git pull origin branch-name

# 上传本地指定分支到远程仓库
$ git push origin branch-name

# 强行推送当前分支到远程仓库，即使有冲突
$ git push origin --force

# 推送所有分支到远程仓库
$ git push origin --all
</code></pre></div></div>

<h2 id="撤销"><strong>撤销</strong></h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 恢复暂存区的指定文件到工作区
$ git checkout file

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout commit-SHA file

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset file

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset commit-SHA

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard commit-SHA

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep commit-SHA

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert commit-SHA

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre></div></div>

<h2 id="冲突解决"><strong>冲突解决</strong></h2>

<p>rebase过程中，也许会出现冲突（conflict）</p>

<ul>
  <li>git会停止rebase，需要解决冲突</li>
  <li>解决完，使用<code class="language-plaintext highlighter-rouge">git add</code>添加冲突的文件，更新暂存区</li>
  <li><code class="language-plaintext highlighter-rouge">git rebase --continue</code>继续剩下的rebase</li>
  <li><code class="language-plaintext highlighter-rouge">git rebase --abort</code>终止rebase行为，并且feature会回到rebase开始之前的状态</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git rebase develop
CONFLICT (content): Rebase conflict in readme.txt
Automatic rebase failed; fix conflicts and then commit the result.

$ git status
On branch feature

You have unmerged paths.
  (fix conflicts and run "git rebase --continue")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add &lt;file&gt;..." to mark resolution)

    both modified:   readme.txt

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre></div></div>

<p>查看readme.md 内容</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Git tracks changes of files.
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Creating a new branch is quick &amp; simple.
=======
Creating a new branch is quick AND simple.
&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature
</code></pre></div></div>

<p>选择保留<code class="language-plaintext highlighter-rouge">HEAD</code>或者<code class="language-plaintext highlighter-rouge">feature</code>的版本</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Git tracks changes of files.
Creating a new branch is quick AND simple.
</code></pre></div></div>

<p>在提交：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add readme.md
$ git rebase --contine
</code></pre></div></div>
:ET