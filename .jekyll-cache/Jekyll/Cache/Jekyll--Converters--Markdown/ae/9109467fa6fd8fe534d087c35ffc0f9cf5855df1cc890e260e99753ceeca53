I"YH<h3 id="1-音频如何转成文字">1. 音频如何转成文字</h3>
<p>推荐一个网址，<a href="https://jianwai.netease.com/index/0">网易见外工作台</a>，能够免费的把一段音频文件转成可编辑的文字，再下载下来。除以功能，网站还提供‘视频翻译’，‘视频转写’，‘字幕翻译’，‘语音翻译’，‘图片翻译’等功能，极大的提高了工作效率。
<img src="https://cdn.jsdelivr.net/gh/tian-guo-guo/cdn@1.0/assets/img/blog/190914-netease_jianwai.png" alt="190914-netease_jianwai.png" /></p>

<h3 id="2-100numpy63-67">2. 100Numpy[63-67]</h3>
<h4 id="63-create-an-array-class-that-has-a-name-attribute-">63. Create an array class that has a name attribute (★★☆)</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">NamedArray</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"no name"</span><span class="p">):</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">array</span><span class="p">).</span><span class="n">view</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span>
        <span class="n">obj</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="k">return</span> <span class="n">obj</span>
    <span class="k">def</span> <span class="nf">__array_finalize__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">obj</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">info</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s">'name'</span><span class="p">,</span> <span class="s">"no name"</span><span class="p">)</span>

<span class="n">Z</span> <span class="o">=</span> <span class="n">NamedArray</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="s">"range_10"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">Z</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>range_10
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>① __ new__是一个标准的Python方法，如果存在，在创建类实例时在__init__之前调用。
② getattr(object,name,default)
如果存在name属性（方法）则返回name的值（方法地址）否则返回default值。
</code></pre></div></div>

<h4 id="64-consider-a-given-vector-how-to-add-1-to-each-element-indexed-by-a-second-vector-be-careful-with-repeated-indices-">64. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)? (★★★)</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Author: Brett Olsen
</span>
<span class="n">Z</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">I</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">Z</span><span class="p">),</span><span class="mi">20</span><span class="p">)</span>
<span class="n">Z</span> <span class="o">+=</span> <span class="n">np</span><span class="p">.</span><span class="n">bincount</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">minlength</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">Z</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>

<span class="c1"># Another solution
# Author: Bartosz Telenczuk
</span><span class="n">np</span><span class="p">.</span><span class="n">add</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">I</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[4. 4. 4. 3. 2. 2. 3. 1. 3. 4.]
[7. 7. 7. 5. 3. 3. 5. 1. 5. 7.]
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>np.bincount大致说bin的数量比x中的最大值大1，每个bin给出了它的索引值在x中出现的次数。
#我们可以看到x中最大的数为7，因此bin的数量为8，那么它的索引值为0-&gt;7
x = np.array([0, 1, 1, 3, 2, 1, 7])
#索引0出现了1次，索引1出现了3次......索引5出现了0次......
np.bincount(x)
#因此，输出结果为：array([1, 3, 1, 1, 0, 0, 0, 1])
#我们可以看到x中最大的数为7，因此bin的数量为8，那么它的索引值为0-&gt;7
x = np.array([7, 6, 2, 1, 4])
#索引0出现了0次，索引1出现了1次......索引5出现了0次......
np.bincount(x)
#输出结果为：array([0, 1, 1, 0, 1, 0, 1, 1])
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>① np.add.accumulate，累加，每一个位置的元素和前面的所有元素加起来求和，得到的始终是numpy数组。
    &gt;&gt;&gt; np.add.accumulate([1,2,3]) #累加
    array([1, 3, 6], dtype=int32)
② np.add.reduce，连加，是将所有元素加在一起求和。
    &gt;&gt;&gt; np.add.reduce([1,2,3,4,5]) #连加
    15
③ np.add.at()是将传入的数组中制定下标位置的元素加上指定的值，如上面是将x中下标为0和为2的元素加上了3，这会改变传入的数组x。
    &gt;&gt;&gt; x=np.array([1,2,3,4])
    &gt;&gt;&gt; np.add.at(x,[0,2],3)
    &gt;&gt;&gt; x
    array([4, 2, 6, 4])
</code></pre></div></div>

<h4 id="65-how-to-accumulate-elements-of-a-vector-x-to-an-array-f-based-on-an-index-list-i-">65. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)? (★★★)</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
<span class="n">I</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">bincount</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">F</span><span class="p">)</span> 
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0. 7. 0. 6. 5. 0. 0. 0. 0. 3.]
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; &gt; &gt; np.bincount(np.arange(5))
&gt; &gt; &gt; array([1, 1, 1, 1, 1])
&gt; &gt; &gt; np.bincount(np.array([0, 1, 1, 3, 2, 1, 7]))
&gt; &gt; &gt; array([1, 3, 1, 1, 0, 0, 0, 1])

&gt; &gt; &gt; x = np.array([0, 1, 1, 3, 2, 1, 7, 23])
&gt; &gt; &gt; np.bincount(x).size == np.amax(x)+1
&gt; &gt; &gt; True

The input array needs to be of integer dtype, otherwise a
TypeError is raised:

&gt; &gt; &gt; np.bincount(np.arange(5, dtype=float))
&gt; &gt; &gt; Traceback (most recent call last):
&gt; &gt; &gt;   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
&gt; &gt; &gt; TypeError: array cannot be safely cast to required type

A possible use of ``bincount`` is to perform sums over
variable-size chunks of an array, using the ``weights`` keyword.

&gt; &gt; &gt; w = np.array([0.3, 0.5, 0.2, 0.7, 1., -0.6]) # weights
&gt; &gt; &gt; x = np.array([0, 1, 1, 2, 2, 2])
&gt; &gt; &gt; np.bincount(x,  weights=w)
&gt; &gt; &gt; array([ 0.3,  0.7,  1.1])
</code></pre></div></div>

<h4 id="66-considering-a-wh3-image-of-dtypeubyte-compute-the-number-of-unique-colors-">66. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors (★★★)</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Author: Nadav Horesh
</span>
<span class="n">w</span><span class="p">,</span><span class="n">h</span> <span class="o">=</span> <span class="mi">16</span><span class="p">,</span><span class="mi">16</span>
<span class="n">I</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,(</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="p">,</span><span class="mi">3</span><span class="p">)).</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ubyte</span><span class="p">)</span>
<span class="c1">#Note that we should compute 256*256 first. 
#Otherwise numpy will only promote F.dtype to 'uint16' and overfolw will occur
</span><span class="n">F</span> <span class="o">=</span> <span class="n">I</span><span class="p">[...,</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="mi">256</span><span class="o">*</span><span class="mi">256</span><span class="p">)</span> <span class="o">+</span> <span class="n">I</span><span class="p">[...,</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="mi">256</span> <span class="o">+</span><span class="n">I</span><span class="p">[...,</span><span class="mi">2</span><span class="p">]</span>
<span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">unique</span><span class="p">(</span><span class="n">F</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>8
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">shape</span><span class="p">(</span><span class="n">I</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">I</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>((16, 16, 3), numpy.ndarray)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">shape</span><span class="p">(</span><span class="n">I</span><span class="p">[...,</span> <span class="mi">0</span><span class="p">]),</span> <span class="nb">type</span><span class="p">(</span><span class="n">I</span><span class="p">[...,</span> <span class="mi">0</span><span class="p">]),</span> <span class="n">I</span><span class="p">[...,</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>((16, 16),
 numpy.ndarray,
 array([[1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
        [0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
        [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0],
        [0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1]], dtype=uint8))
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">shape</span><span class="p">(</span><span class="n">F</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">F</span><span class="p">),</span> <span class="n">F</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>((16, 16),
 numpy.ndarray,
 array([[65793, 65537, 65793, 65793,     1,   256,     0,     1, 65536,
         65536,     0,     0, 65536, 65537, 65536,   257],
        [  257,     0,   256,     1,     0, 65536,     1, 65793,   257,
           257,     0, 65537,     1,     1, 65793,   256]], dtype=uint32))
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>np.unique: 对于一维数组或者列表，unique函数去除其中重复的元素，并按元素由大到小返回一个新的无元素重复的元组或者列表
import numpy as np
A = [1, 2, 2, 5,3, 4, 3]
a = np.unique(A)
B= (1, 2, 2,5, 3, 4, 3)
b= np.unique(B)
C= ['fgfh','asd','fgfh','asdfds','wrh']
c= np.unique(C)
print(a)
print(b)
print(c)
#输出为 [1 2 3 4 5]
#[1 2 3 4 5]
#['asd' 'asdfds' 'fgfh' 'wrh']
</code></pre></div></div>

<h4 id="67-considering-a-four-dimensions-array-how-to-get-sum-over-the-last-two-axis-at-once-">67. Considering a four dimensions array, how to get sum over the last two axis at once? (★★★)</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="c1"># solution by passing a tuple of axes (introduced in numpy 1.7.0)
</span><span class="n">s</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="c1"># solution by flattening the last two dimensions into one
# (useful for functions that don't accept tuples for axis argument)
</span><span class="n">s</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">A</span><span class="p">.</span><span class="n">shape</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,)).</span><span class="nb">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[66 54 37 69]
 [62 59 49 40]
 [27 39 58 52]]
[[66 54 37 69]
 [62 59 49 40]
 [27 39 58 52]]
</code></pre></div></div>
:ET