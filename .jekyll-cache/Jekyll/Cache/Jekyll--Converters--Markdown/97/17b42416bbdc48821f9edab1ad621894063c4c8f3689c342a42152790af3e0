I"Y"<h1 id="剑指-offer-27-二叉树的镜像-226-翻转二叉树"><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/">剑指 Offer 27. 二叉树的镜像</a> <a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h1>

<p>tag: easy，二叉树，递归，辅助栈（队列）</p>

<p><strong>题目：</strong></p>

<p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>

<p>例如输入：</p>

<p>4
  /  <br />
 2   7
 / \  / <br />
1  3 6  9</p>

<p>镜像输出：</p>

<p>4
  /  <br />
 7   2
 / \  / <br />
9  6 3  1</p>

<p><strong>示例 1：</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入：root = [4,2,7,1,3,6,9]
输出：[4,7,2,9,6,3,1]
</code></pre></div></div>

<h1 id="方法一递归法">方法一：递归法</h1>

<blockquote>
  <p>二叉树镜像定义： 对于二叉树中任意节点 root，设其左 / 右子节点分别为 left, right ；则在二叉树的镜像中的对应 root节点，其左 / 右子节点分别为 right, left 。</p>
</blockquote>

<ul>
  <li>复杂度分析：
    <ul>
      <li>时间复杂度 O(N) ： 其中 N 为二叉树的节点数量，建立二叉树镜像需要遍历树的所有节点，占用 O(N)时间。</li>
      <li>空间复杂度 O(N) ： 最差情况下（当二叉树退化为链表），递归时系统需使用 O(N)大小的栈空间。</li>
    </ul>
  </li>
  <li>解题思路：
    <ul>
      <li>根据二叉树镜像的定义，考虑递归遍历（dfs）二叉树，交换每个节点的左 / 右子节点，即可生成二叉树的镜像。</li>
      <li>递归解析：
        <ol>
          <li>终止条件： 当节点 root为空时（即越过叶节点），则返回 null；</li>
          <li>递推工作：</li>
          <li>初始化节点 tmp，用于暂存 root的左子节点；</li>
          <li>开启递归 右子节点 mirrorTree(root.right)，并将返回值作为 root的 左子节点 。</li>
          <li>开启递归 左子节点 mirrorTree(tmp)，并将返回值作为 root的 右子节点 。</li>
          <li>返回值： 返回当前节点 root；</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mirrorTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">root</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">mirrorTree</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">),</span> <span class="bp">self</span><span class="p">.</span><span class="n">mirrorTree</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：36 ms, 在所有 Python3 提交中击败了90.35%的用户</p>

  <p>内存消耗：13.4 MB, 在所有 Python3 提交中击败了27.56%的用户</p>
</blockquote>

<h1 id="方法二辅助栈队列">方法二：辅助栈（队列）</h1>

<blockquote>
  <p>利用栈（或队列）遍历树的所有节点 node，并交换每个 node的左 / 右子节点。</p>
</blockquote>

<ul>
  <li>算法流程：
    <ol>
      <li>特例处理： 当 root为空时，直接返回 null；</li>
      <li>初始化： 栈（或队列），本文用栈，并加入根节点 root。</li>
      <li>循环交换： 当栈 stack为空时跳出；
        <ol>
          <li>出栈： 记为 node；</li>
          <li>添加子节点： 将 node左和右子节点入栈；</li>
          <li>交换： 交换 node的左 / 右子节点。</li>
        </ol>
      </li>
      <li>返回值： 返回根节点 root 。</li>
    </ol>
  </li>
  <li>复杂度分析：
    <ul>
      <li>时间复杂度 O(N)： 其中 N为二叉树的节点数量，建立二叉树镜像需要遍历树的所有节点，占用 O(N)时间。</li>
      <li>空间复杂度 O(N)： 最差情况下（当为满二叉树时），栈 stack最多同时存储 N/2个节点，占用 O(N)额外空间。</li>
    </ul>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TreeNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="bp">None</span>
        
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">mirrorTree</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
        <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">stack</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
            <span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span>
        <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div>

<blockquote>
  <p>执行用时：32 ms, 在所有 Python3 提交中击败了97.16%的用户</p>

  <p>内存消耗：13.4 MB, 在所有 Python3 提交中击败了33.78%的用户</p>
</blockquote>

<p><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/solution/mian-shi-ti-27-er-cha-shu-de-jing-xiang-di-gui-fu-/">Link</a></p>

:ET