I"<h1 id="详说-cookie-localstorage-与-sessionstorage"><a href="https://jerryzou.com/posts/cookie-and-web-storage/">详说 Cookie, LocalStorage 与 SessionStorage</a></h1>

<h2 id="基本概念">基本概念</h2>

<h4 id="cookie">Cookie</h4>

<p>Cookie 是小甜饼的意思。顾名思义，cookie 确实非常小，它的大小限制为4KB左右，是网景公司的前雇员 Lou Montulli 在1993年3月的发明。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。</p>

<h4 id="localstorage">localStorage</h4>

<p>localStorage 是 HTML5 标准中新加入的技术，它并不是什么划时代的新东西。早在 IE 6 时代，就有一个叫 userData 的东西用于本地存储，而当时考虑到浏览器兼容性，更通用的方案是使用 Flash。而如今，localStorage 被大多数浏览器所支持，如果你的网站需要支持 IE6+，那以 userData 作为你的 polyfill 的方案是种不错的选择。</p>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Chrome</th>
      <th>Firefox (Gecko)</th>
      <th>Internet Explorer</th>
      <th>Opera</th>
      <th>Safari (WebKit)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>localStorage</td>
      <td>4</td>
      <td>3.5</td>
      <td>8</td>
      <td>10.50</td>
      <td>4</td>
    </tr>
    <tr>
      <td>sessionStorage</td>
      <td>5</td>
      <td>2</td>
      <td>8</td>
      <td>10.50</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<h4 id="sessionstorage">sessionStorage</h4>

<p>sessionStorage 与 localStorage 的接口类似，但保存数据的生命周期与 localStorage 不同。做过后端开发的同学应该知道 Session 这个词的意思，直译过来是“会话”。而 sessionStorage 是一个前端的概念，它只是可以将一部分数据在当前会话中保存下来，刷新页面数据依旧存在。但当页面关闭后，sessionStorage 中的数据就会被清空。</p>

<h2 id="三者的异同">三者的异同</h2>

<table>
  <thead>
    <tr>
      <th>特性</th>
      <th>Cookie</th>
      <th>localStorage</th>
      <th>sessionStorage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>数据的生命期</td>
      <td>一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td>
      <td>除非被清除，否则永久保存</td>
      <td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
    </tr>
    <tr>
      <td>存放数据大小</td>
      <td>4K左右</td>
      <td>一般为5MB</td>
      <td> </td>
    </tr>
    <tr>
      <td>与服务器端通信</td>
      <td>每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
      <td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
      <td> </td>
    </tr>
    <tr>
      <td>易用性</td>
      <td>需要程序员自己封装，源生的Cookie接口不友好</td>
      <td>源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<h4 id="应用场景">应用场景</h4>

<p>有了对上面这些差别的直观理解，我们就可以讨论三者的应用场景了。</p>

<p>因为考虑到每个 HTTP 请求都会带着 Cookie 的信息，所以 Cookie 当然是能精简就精简啦，比较常用的一个应用场景就是判断用户是否登录。针对登录过的用户，服务器端会在他登录时往 Cookie 中插入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦。曾经还使用 Cookie 来保存用户在电商网站的购物车信息，如今有了 localStorage，似乎在这个方面也可以给 Cookie 放个假了~</p>

<p>而另一方面 localStorage 接替了 Cookie 管理购物车的工作，同时也能胜任其他一些工作。比如HTML5游戏通常会产生一些本地数据，localStorage 也是非常适用的。如果遇到一些内容特别多的表单，为了优化用户体验，我们可能要把表单页面拆分成多个子页面，然后按步骤引导用户填写。这时候 sessionStorage 的作用就发挥出来了。</p>

<h2 id="安全性的考虑">安全性的考虑</h2>

<p>需要注意的是，不是什么数据都适合放在 Cookie、localStorage 和 sessionStorage 中的。使用它们的时候，需要时刻注意是否有代码存在 XSS 注入的风险。因为只要打开控制台，你就随意修改它们的值，也就是说如果你的网站中有 XSS 的风险，它们就能对你的 localStorage 肆意妄为。所以千万不要用它们存储你系统中的敏感数据。</p>

<h2 id="参考资料">参考资料</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookie">what is the difference between localStorage, sessionStorage, session and cookie?</a></li>
  <li><a href="https://stackoverflow.com/questions/3718349/html5-localstorage-security">HTML5 localStorage security</a></li>
  <li><a href="https://zh.wikipedia.org/wiki/Cookie">维基百科 - Cookie</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API">Web Storage API</a></li>
  <li><a href="http://han.guokai.blog.163.com/blog/static/13671827120112694851799/">浏览器本地数据（sessionStorage、localStorage、cookie）与server端数据</a></li>
  <li><a href="https://www.cnblogs.com/yuzhongwusan/archive/2011/12/19/2293347.html">HTMl5的sessionStorage和localStorage</a></li>
  <li><a href="https://www.cnblogs.com/xiaowei0705/archive/2011/04/19/2021372.html">HTML5 LocalStorage 本地存储</a></li>
</ul>
:ET