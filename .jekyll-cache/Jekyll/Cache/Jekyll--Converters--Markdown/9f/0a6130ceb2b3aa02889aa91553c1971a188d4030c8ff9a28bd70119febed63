I"A <h1 id="css实现自适应九宫格布局"><a href="https://blog.fundebug.com/2017/05/25/arrow-function-for-beginner/"><strong>CSS实现自适应九宫格布局</strong></a></h1>

<p>看到微博和朋友圈都实现了图片九宫格，曾经有次面试也问到了九宫格这个问题，当时想到的是先固定每个单元格的宽高，然后进行浮动。今天想折腾一下，实现自适应父元素宽度的布局。这次我只写了四种方式去实现九宫格，算上<code class="language-plaintext highlighter-rouge">inline-block</code>的话就是五种了。</p>

<p>首先要注意的是九宫格容器是宽高相等的正方形，并且是自适应的，这里关键是实现宽高相等，有些人想到了相对视口宽度 <strong>vw</strong>，但是它是相对于屏幕可见宽度来设置的，并且会忽略滚动条的宽度，所以这是不可行的。这里我用一种变通方法，看代码…</p>

<h2 id="flexbox">FlexBox</h2>

<p>HTML 结构如下：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="square"&gt;
  &lt;ul class="square-inner flex"&gt;
    &lt;li&gt;1&lt;/li&gt;
    &lt;li&gt;2&lt;/li&gt;
    &lt;li&gt;3&lt;/li&gt;
    &lt;li&gt;4&lt;/li&gt;
    &lt;li&gt;5&lt;/li&gt;
    &lt;li&gt;6&lt;/li&gt;
    &lt;li&gt;7&lt;/li&gt;
    &lt;li&gt;8&lt;/li&gt;
    &lt;li&gt;9&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre></div></div>

<p>抽取公共样式：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.square{
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 100%; /* padding百分比是相对父元素宽度计算的 */
  margin-bottom: 30px;
}
.square-inner{
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; /* 铺满父元素容器，这时候宽高就始终相等了 */
}
.square-inner&gt;li{
  width: calc(98% / 3);  /* calc里面的运算符两边要空格 */
  height: calc(98% / 3);
  margin-right: 1%;
  margin-bottom: 1%;
  overflow: hidden;
}
</code></pre></div></div>

<p>使用Flex的一个好处是不用再担心高度塌陷的问题，而且还可以轻松实现子元素横向竖向甚至按比例伸缩扩展的布局。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.flex{
  display: flex;
  flex-wrap: wrap;
}
.flex&gt;li{
  flex-grow: 1; /* 子元素按1/n的比例进行拉伸 */
  background-color: #4d839c;
  text-align: center;
  color: #fff;
  font-size: 50px;
  line-height: 2;
}
.flex&gt;li:nth-of-type(3n){ /* 选择个数是3的倍数的元素 */
  margin-right: 0;
}
.flex&gt;li:nth-of-type(n+7){  /* 选择倒数的三个元素，n可以取0 */
  margin-bottom: 0;
}
</code></pre></div></div>

<p><a href="https://i.loli.net/2017/12/08/5a2a6c7ca0c88.png"><img src="https://i.loli.net/2017/12/08/5a2a6c7ca0c88.png" alt="17_12_08_01.png" /></a></p>

<p><a href="https://i.loli.net/2017/12/08/5a2a6c7ca0c88.png">FlexBox-效果图</a></p>

<h2 id="grid">Grid</h2>

<p>对于网格布局来说，grid 比 flex 更为方便，代码量更少，可以处理更为复杂的结构。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="square"&gt;
  &lt;div class="square-inner grid"&gt;
    &lt;div&gt;1&lt;/div&gt;
    &lt;div&gt;2&lt;/div&gt;
    &lt;div&gt;3&lt;/div&gt;
    &lt;div&gt;4&lt;/div&gt;
    &lt;div&gt;5&lt;/div&gt;
    &lt;div&gt;6&lt;/div&gt;
    &lt;div&gt;7&lt;/div&gt;
    &lt;div&gt;8&lt;/div&gt;
    &lt;div&gt;9&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
.grid{
  display: grid;
  grid-template-columns: repeat(3, 1fr); /* 相当于 1fr 1fr 1fr */
  grid-template-rows: repeat(3, 1fr); /* fr单位可以将容器分为几等份 */
  grid-gap: 1%; /* grid-column-gap 和 grid-row-gap的简写 */
  grid-auto-flow: row;
}
.grid&gt;div{
  color: #fff;
  font-size: 50px;
  line-height: 2;
  text-align: center;
  background: linear-gradient(to bottom, #f5f6f6 0%,#dbdce2 21%,#b8bac6 49%,#dddfe3 80%,#f5f6f6 100%);
}
</code></pre></div></div>

<p><a href="https://i.loli.net/2017/12/10/5a2cf18e48460.png"><img src="https://i.loli.net/2017/12/10/5a2cf18e48460.png" alt="17_12_08_05.png" /></a></p>

<p><a href="https://i.loli.net/2017/12/10/5a2cf18e48460.png">Grid-效果图</a></p>

<p>更多：<a href="http://blog.csdn.net/ceshi986745/article/details/51733383">CSS Grid布局指南</a></p>

<h2 id="float">Float</h2>

<p>浮动实现九宫格就不多说了，原理同上。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="square"&gt;
  &lt;ul class="square-inner float"&gt;
    &lt;li&gt;1&lt;/li&gt;
    &lt;li&gt;2&lt;/li&gt;
    &lt;li&gt;3&lt;/li&gt;
    &lt;li&gt;4&lt;/li&gt;
    &lt;li&gt;5&lt;/li&gt;
    &lt;li&gt;6&lt;/li&gt;
    &lt;li&gt;7&lt;/li&gt;
    &lt;li&gt;8&lt;/li&gt;
    &lt;li&gt;9&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
.float::after{
  content: "";
  display: block;
  clear: both;
  visibility: hidden;
}
.float&gt;li{
  float: left;
  background-color: #42a59f;
  text-align: center;
  color: #fff;
  font-size: 50px;
  line-height: 2;
}
.float&gt;li:nth-of-type(3n){
  margin-right: 0;
}
.float&gt;li:nth-of-type(n+7){
  margin-bottom: 0;
}
</code></pre></div></div>

<p><a href="https://i.loli.net/2017/12/08/5a2a6c7ca6312.png"><img src="https://i.loli.net/2017/12/08/5a2a6c7ca6312.png" alt="17_12_08_02.png" /></a></p>

<p><a href="https://i.loli.net/2017/12/08/5a2a6c7ca6312.png">Float-效果图</a></p>

<p>除了浮动，这里 li 也可以使用<code class="language-plaintext highlighter-rouge">display: inline-block;</code>实现同样的效果，不过要注意HTML代码非压缩情况下行块级元素之间会出现默认间隔，不同浏览器下表现还不一样，这时可以给父级元素设置<code class="language-plaintext highlighter-rouge">font-size: 0;</code></p>

<h2 id="table">Table</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;div class="square"&gt;
  &lt;table class="square-inner table"&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;1&lt;/td&gt;
        &lt;td&gt;2&lt;/td&gt;
        &lt;td&gt;3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;4&lt;/td&gt;
        &lt;td&gt;5&lt;/td&gt;
        &lt;td&gt;6&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;7&lt;/td&gt;
        &lt;td&gt;8&lt;/td&gt;
        &lt;td&gt;9&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;
.table{
  border-collapse: separate;
  border-spacing: 0.57em;
  font-size: 14px;
  empty-cells: hide;
  table-layout: fixed;
}
.table&gt;tbody&gt;tr&gt;td{
  text-align: center;
  background-color: #889ed8;
  overflow: hidden;
}
</code></pre></div></div>

<p><a href="https://i.loli.net/2017/12/08/5a2a6c7cab47a.png"><img src="https://i.loli.net/2017/12/08/5a2a6c7cab47a.png" alt="17_12_08_03.png" /></a></p>

<p><a href="https://i.loli.net/2017/12/08/5a2a6c7cab47a.png">Table-效果图</a></p>

<p>说下用表格实现九宫格有哪些瑕疵：</p>

<ul>
  <li>最后一行最后一列的单元格宽高与前面的不一致，虽然相差不大，但是还是有差异的；</li>
  <li>与前面的两种方法不同，table 单元格之间的间隔是利用<code class="language-plaintext highlighter-rouge">border-spacing</code>属性实现的，且不支持百分比，单元格四周都有类似margin的外边距效果，如下图。</li>
</ul>

<p><a href="https://i.loli.net/2017/12/08/5a2a7142123ad.png"><img src="https://i.loli.net/2017/12/08/5a2a7142123ad.png" alt="17_12_08_04.png" /></a></p>

<p><a href="https://i.loli.net/2017/12/08/5a2a7142123ad.png">浏览器渲染效果图</a></p>

<h2 id="分析">分析</h2>

<p>综上来看，个人认为 FlexBox 适合用于移动端，PC端 IE10 以下不支持；Grid网格布局比较方便，但是规范还未成熟，主流浏览器厂商尚未推广，不推荐使用在项目中；浮动和行块级式声明可以兼容到IE6，移动端和PC端支持的都不错；Table 因为实现有瑕疵所以不推荐使用。</p>
:ET